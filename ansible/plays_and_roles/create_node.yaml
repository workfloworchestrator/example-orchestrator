- name: Deploy config on a nokia node
  hosts: all
  gather_facts: no
  vars:
   ansible_network_os: nokia.srlinux.srlinux
   ansible_connection: ansible.netcommon.httpapi
   ansible_user: admin
   ansible_password: NokiaSrl1!
   netbox_url: "http://netbox:8080"
   netbox_token: "e744057d755255a31818bf74df2350c26eeabe54"
   debug: false
  tasks:
   - name: Dump subscripion
     ansible.builtin.debug:
       msg: "{{node}}"
     when: debug|ansible.builtin.bool is true
   - name: Build the queries
     ansible.builtin.set_fact:
        api_v4_filter: "id={{node.node.ipv4_ipam_id}}" 
        api_v6_filter: "id={{node.node.ipv6_ipam_id}}" 
   - name: Get loopback addresses from netbox
     ansible.builtin.set_fact:
        loopback_ipv4_address_object: "{{ query('netbox.netbox.nb_lookup', 'ip-addresses', 
                                      api_endpoint=netbox_url, api_filter=api_v4_filter , 
                                      token=netbox_token) }}" 
        loopback_ipv6_address_object: "{{ query('netbox.netbox.nb_lookup', 'ip-addresses', 
                                      api_endpoint=netbox_url, api_filter=api_v6_filter , 
                                      token=netbox_token) }}" 
   - name: Assign addresses to variables
     ansible.builtin.set_fact:
        loopback_ipv4_address: "{{loopback_ipv4_address_object[0].address}}"
        loopback_ipv6_address: "{{loopback_ipv6_address_object[0].address}}"
   - name: Remove netmask from IPv4 loopback
     ansible.builtin.set_fact:
       ipv4_lo_no_slash: "{{ loopback_ipv4_address|split('/') | list() }}"
   - name: Remove netmask from IPv6 loopback
     ansible.builtin.set_fact:
       ipv6_lo_no_slash: "{{ loopback_ipv6_address|split('/') | list() }}"
   - name: Calculate IPv4 loopback last octect - part2
     ansible.builtin.set_fact:
       ipv4_lo_splitted: "{{ ipv4_lo_no_slash[0]|split('.') | list() }}"
   - name: Calculate IPv4 loopback last octect - part3 
     ansible.builtin.set_fact:
       ipv4_lo_last_octect: "{{ ipv4_lo_splitted[3] }}"
   - name: Calculate ISO address
     ansible.builtin.set_fact:
       iso_address: "49.0001.0000.0000.{{ '%04d' % (ipv4_lo_last_octect|int) }}.00"
   - name: Show IP addresses for loopback
     ansible.builtin.debug:
       msg: " ISO ADDRESS IS {{iso_address}} - LOOPBACK IPV4_ADDRESS IS {{ipv4_lo_no_slash[0]}} - LOOPBACK IPV6_ADDRESS IS {{ipv6_lo_no_slash[0]}} "
   - name: Configure nokia device with basic stuff
     nokia.srlinux.config:
       update: 
         - path: "/interface[name=lo1]"
           value:
             admin-state: enable
             description: "Loopback Interface"
             subinterface:
               - index: 0
                 admin-state: enable
                 description: "Loopback interface - unit 0 "
                 ipv4:
                   admin-state: enable
                   address:
                     - ip-prefix: "{{ipv4_lo_no_slash[0]}}/32"
                 ipv6:
                   admin-state: enable
                   address:
                     - ip-prefix: "{{ipv6_lo_no_slash[0]}}/128"
         - path: "/network-instance[name=default]"
           value:
             interface: 
               name: lo1.0
         - path: "/network-instance[name=default]/protocols/isis/instance[name=default]"
           value:
             admin-state: enable
             net: [ "{{iso_address}}" ]
             ipv4-unicast:
                admin-state: enable
             ipv6-unicast:
                admin-state: enable
         - path: "/network-instance[name=default]/protocols/isis/instance[name=default]/interface[interface-name=lo1.0]"
           value:
             admin-state: enable
     register: response

   - debug:
       var: response

   - name: Fail so we can retry
     ansible.builtin.fail:
        msg: Now you can hit retry
     when: debug|ansible.builtin.bool is true
