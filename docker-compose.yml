x-netbox:
  &netbox
  build:
    context: docker/netbox
    dockerfile: Dockerfile
  depends_on:
    - postgres
    - redis
  env_file: ./docker/netbox/netbox.env
  user: 'unit:root'
  healthcheck:
    start_period: 360s
    timeout: 3s
    interval: 15s
    test: "curl -f http://localhost:8080/api/ || exit 1"
  volumes:
    - ./docker/netbox/configuration:/etc/netbox/config:z,ro
    - ./docker/netbox/reports:/etc/netbox/reports:z,ro
    - ./docker/netbox/scripts:/etc/netbox/scripts:z,ro
    - ./docker/netbox/entrypoint.sh:/etc/netbox/entrypoint.sh
    - netbox-media-files:/opt/netbox/netbox/media:z
    - ./docker/netbox/data.json:/etc/netbox/data.json

services:
  #
  # Shared
  #
  postgres:
    image: 'postgres:14'
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: nwa
      POSTGRES_PASSWORD: nwa
      POSTGRES_DB: orchestrator-core
    volumes:
      - db-data:/var/lib/postgresql/data/
      - ./docker/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--username",
          "nwa",
          "--dbname",
          "orchestrator-core"
        ]
      interval: "3s"
      timeout: "2s"
      retries: 20
      start_period: "5s"

  redis:
    image: docker.io/redis:7-alpine
    command:
      - sh
      - -c # this is to evaluate the $REDIS_PASSWORD from the env
      - redis-server --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    env_file: ./docker/redis/redis.env
    volumes:
      - netbox-redis-cache-data:/data

  rover-compose:
    build:
      context: docker/federation
      dockerfile: rover.Dockerfile
    depends_on:
      orchestrator:
        condition: service_started
      netbox:
        condition: service_healthy
    environment:
      - APOLLO_ELV2_LICENSE=accept
      - APOLLO_TELEMETRY_DISABLED=true
    command: supergraph compose --config /app/supergraph-config.yaml --output /app/supergraph.graphql --skip-update-check
    volumes:
      - ./docker/federation:/app

  federation:
    image: ghcr.io/apollographql/router:v1.47.0
    ports:
      - "4000:4000"
    depends_on:
      rover-compose:
        condition: service_completed_successfully
    environment:
      - APOLLO_TELEMETRY_DISABLED=true
    command: --config /app/router-config.yaml --supergraph /app/supergraph.graphql
    volumes:
      - ./docker/federation:/app

  #
  # Netbox
  #
  netbox:
    <<: *netbox
    expose:
      - "8080"
    ports:
      - "8000:8080"
    entrypoint:
      [
        "/opt/netbox/docker-entrypoint.sh",
        "/etc/netbox/entrypoint.sh"
      ]

  netbox-worker:
    <<: *netbox
    depends_on:
      netbox:
        condition: service_healthy
    command:
      - /opt/netbox/venv/bin/python
      - /opt/netbox/netbox/manage.py
      - rqworker
    healthcheck:
      start_period: 20s
      timeout: 3s
      interval: 15s
      test: "ps -aux | grep -v grep | grep -q rqworker || exit 1"

  netbox-housekeeping:
    <<: *netbox
    depends_on:
      netbox:
        condition: service_healthy
    command:
      - /opt/netbox/housekeeping.sh
    healthcheck:
      start_period: 20s
      timeout: 3s
      interval: 15s
      test: "ps -aux | grep -v grep | grep -q housekeeping || exit 1"

  #
  # Orchestrator
  #
  orchestrator-ui:
    image: "ghcr.io/workfloworchestrator/example-orchestrator-ui:latest"
    env_file: ./docker/orchestrator-ui/orchestrator-ui.env
    ports:
      - "3000:3000"
    depends_on:
      orchestrator:
        condition: service_started

  orchestrator:
    &orchestrator
    image: "ghcr.io/workfloworchestrator/orchestrator-core:latest"
    env_file: ./docker/orchestrator/orchestrator.env
    environment:
      LSO_ENABLED: ${COMPOSE_PROFILES:+True}
    ports:
      - "8080:8080"
      - "5678:5678" #Enable Python debugger
    expose:
      - 5678 #Enable Python debugger
    volumes:
      - ./workflows:/home/orchestrator/workflows
      - ./products:/home/orchestrator/products
      - ./migrations:/home/orchestrator/migrations
      - ./docker:/home/orchestrator/etc
      - ./main.py:/home/orchestrator/main.py
      - ./settings.py:/home/orchestrator/settings.py
      - ./graphql_federation.py:/home/orchestrator/graphql_federation.py
      - ./utils:/home/orchestrator/utils
      - ./services:/home/orchestrator/services
      - ./requirements.txt:/home/orchestrator/requirements.txt
      - ./alembic.ini:/home/orchestrator/alembic.ini
      - ./translations:/home/orchestrator/translations
      - ./templates:/home/orchestrator/templates
    entrypoint: [ "/home/orchestrator/etc/orchestrator/entrypoint.sh" ]
    depends_on:
      postgres:
        condition: service_healthy

  orchestrator-worker:
    <<: *orchestrator
    ports:
      # - "8080:8080"
      - "5679:5678" #Enable Python debugger
    expose:
      - 5679 #Enable Python debugger
    volumes:  # CLEANUP if it works
      - ./workflows:/home/orchestrator/workflows
      - ./products:/home/orchestrator/products
      - ./migrations:/home/orchestrator/migrations
      - ./docker:/home/orchestrator/etc
      - ./main.py:/home/orchestrator/main.py
      - ./graphql_federation.py:/home/orchestrator/graphql_federation.py
      - ./settings.py:/home/orchestrator/settings.py
      - ./tasks.py:/home/orchestrator/tasks.py
      - ./utils:/home/orchestrator/utils
      - ./services:/home/orchestrator/services
      - ./requirements.txt:/home/orchestrator/requirements.txt
      - ./requirements-worker.txt:/home/orchestrator/requirements-worker.txt
      - ./translations:/home/orchestrator/translations
      - ./templates:/home/orchestrator/templates
    entrypoint: [ "/home/orchestrator/etc/orchestrator/entrypoint_worker.sh" ]
    depends_on:
      postgres:
        condition: service_healthy

  #
  # LSO
  #
  lso:
    image: orchestrator-lso
    profiles:
      - lso
    build:
      context: ./docker/lso/
      dockerfile: Dockerfile
    env_file: ./docker/lso/lso.env
    ports:
      - "8001:8000"
    volumes:
      - ./docker/lso/config.json:/app/config.json
      - ./ansible/plays_and_roles:/app/wfo/ansible
      - ./ansible/inventory:/opt/ansible_inventory

volumes:
  netbox-media-files:
    driver: local
  db-data:
    driver: local
  netbox-redis-data:
    driver: local
  netbox-redis-cache-data:
    driver: local
